{"ast":null,"code":"import _initializerDefineProperty from \"C:/Workspace/React-Mobx/5.todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"C:/Workspace/React-Mobx/5.todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"C:/Workspace/React-Mobx/5.todo-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action, computed, makeObservable, toJS } from 'mobx';\nlet TodoStore = (_class = (_temp = class TodoStore {\n  constructor() {\n    _initializerDefineProperty(this, \"_todo\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"_todos\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"_searchText\", _descriptor3, this);\n\n    makeObservable(this);\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n\n  get todo() {\n    return this._todo;\n  } //computed를 사용하는 이유?!\n  //->>옵저버블데이터간의 연산이 일어날 때 사용!!!\n\n\n  get todos() {\n    // return this._todos ? this._todo.slice() : []; \n    //원래 그냥 todos를 반환하면 몹엑스가 저 todos를 observableArrayAdministration? 같은 이상한 타입으로 감싸서 관리하게 되는데 뭐 별 이상은 없는데 우리가 개발자도구에서 시각적으로 확 안 옴. 그래서 위에 처럼 하면 todos가 javascript배열 타입으로 반환해줌 근데 문제는 또 이게 한번만 이렇게 되지 그 다음 또 add할 때는 다시 또 몹엑스가 관리하는 타입으로 반환됨. 그래서 toJS쓰면 됨\n    return toJS(this._todos);\n  }\n\n  setTodoProps(name, value) {\n    this._todo = { ...this._todo,\n      [name]: value\n    };\n  }\n\n  addTodo(todo) {\n    this._todos.push(todo);\n\n    this._todo = {};\n  }\n\n  selectedTodo(todo) {\n    this._todo = todo;\n  }\n\n  updateTodo() {\n    let foundTodo = this._todos.find(todo => todo.id === this._todo.id);\n\n    foundTodo.title = this._todo.title;\n    foundTodo.date = this._todo.date;\n    this._todo = {};\n  }\n\n  removeTodo() {\n    let index = this._todos.findIndex(todo => todo.id === this._todo.id);\n\n    if (index > -1) {\n      this._todos.splice(index, 1);\n    }\n\n    this._todo = {};\n  }\n\n  onSearchTodo(title) {\n    let updateTodos = this._todo;\n    console.log(updateTodos);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_todo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"_todos\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"_searchText\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"searchText\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"searchText\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"todo\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"todo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"todos\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"todos\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setTodoProps\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setTodoProps\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"addTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"addTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"selectedTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"selectedTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"updateTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"updateTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"removeTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"removeTodo\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"onSearchTodo\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"onSearchTodo\"), _class.prototype)), _class);\nexport default new TodoStore();","map":{"version":3,"sources":["C:/Workspace/React-Mobx/5.todo-mobx/src/stores/TodoStore.js"],"names":["observable","action","computed","makeObservable","toJS","TodoStore","constructor","searchText","_searchText","todo","_todo","todos","_todos","setTodoProps","name","value","addTodo","push","selectedTodo","updateTodo","foundTodo","find","id","title","date","removeTodo","index","findIndex","splice","onSearchTodo","updateTodos","console","log"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,cAAvC,EAAuDC,IAAvD,QAAmE,MAAnE;IAEMC,S,sBAAN,MAAMA,SAAN,CAAgB;AAEZC,EAAAA,WAAW,GAAG;AAAA;;AAAA;;AAAA;;AACVH,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH;;AASD,MACII,UADJ,GACiB;AACb,WAAO,KAAKC,WAAZ;AACH;;AAED,MACIC,IADJ,GACW;AACP,WAAO,KAAKC,KAAZ;AACH,GArBW,CAsBZ;AACA;;;AACA,MACIC,KADJ,GACY;AACR;AACA;AACA,WAAOP,IAAI,CAAC,KAAKQ,MAAN,CAAX;AACH;;AAEDC,EAAAA,YADA,CACaC,IADb,EACmBC,KADnB,EAC0B;AACtB,SAAKL,KAAL,GAAa,EACT,GAAG,KAAKA,KADC;AAET,OAACI,IAAD,GAAQC;AAFC,KAAb;AAIH;;AAEDC,EAAAA,OADA,CACQP,IADR,EACc;AACV,SAAKG,MAAL,CAAYK,IAAZ,CAAiBR,IAAjB;;AACA,SAAKC,KAAL,GAAa,EAAb;AACH;;AAEDQ,EAAAA,YADA,CACaT,IADb,EACmB;AACf,SAAKC,KAAL,GAAaD,IAAb;AACH;;AAEDU,EAAAA,UADA,GACa;AACT,QAAIC,SAAS,GAAG,KAAKR,MAAL,CAAYS,IAAZ,CAAkBZ,IAAD,IAAUA,IAAI,CAACa,EAAL,KAAY,KAAKZ,KAAL,CAAWY,EAAlD,CAAhB;;AACAF,IAAAA,SAAS,CAACG,KAAV,GAAkB,KAAKb,KAAL,CAAWa,KAA7B;AACAH,IAAAA,SAAS,CAACI,IAAV,GAAiB,KAAKd,KAAL,CAAWc,IAA5B;AAEA,SAAKd,KAAL,GAAa,EAAb;AACH;;AAEDe,EAAAA,UADA,GACa;AACT,QAAIC,KAAK,GAAG,KAAKd,MAAL,CAAYe,SAAZ,CAAsBlB,IAAI,IAAIA,IAAI,CAACa,EAAL,KAAY,KAAKZ,KAAL,CAAWY,EAArD,CAAZ;;AACA,QAAII,KAAK,GAAG,CAAC,CAAb,EAAgB;AACZ,WAAKd,MAAL,CAAYgB,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACH;;AACD,SAAKhB,KAAL,GAAa,EAAb;AACH;;AAEDmB,EAAAA,YADA,CACaN,KADb,EACoB;AAChB,QAAIO,WAAW,GAAG,KAAKpB,KAAvB;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACH;;AAlEW,C,+EAMX9B,U;;;;;WACO,E;;0EACPA,U;;;;;WACQ,E;;+EACRA,U;;;;;WACa,E;;+DAEbE,Q,4IAKAA,Q,uIAMAA,Q,+IAMAD,M,iJAOAA,M,iJAKAA,M,oJAIAA,M,kJAQAA,M,oJAQAA,M;AAQL,eAAe,IAAII,SAAJ,EAAf","sourcesContent":["import { observable, action, computed, makeObservable, toJS } from 'mobx';\r\n\r\nclass TodoStore {\r\n\r\n    constructor() {\r\n        makeObservable(this);\r\n    }\r\n\r\n    @observable\r\n    _todo = {}\r\n    @observable\r\n    _todos = [];\r\n    @observable\r\n    _searchText = '';\r\n\r\n    @computed\r\n    get searchText() {\r\n        return this._searchText;\r\n    }\r\n\r\n    @computed\r\n    get todo() {\r\n        return this._todo;\r\n    }\r\n    //computed를 사용하는 이유?!\r\n    //->>옵저버블데이터간의 연산이 일어날 때 사용!!!\r\n    @computed\r\n    get todos() {\r\n        // return this._todos ? this._todo.slice() : []; \r\n        //원래 그냥 todos를 반환하면 몹엑스가 저 todos를 observableArrayAdministration? 같은 이상한 타입으로 감싸서 관리하게 되는데 뭐 별 이상은 없는데 우리가 개발자도구에서 시각적으로 확 안 옴. 그래서 위에 처럼 하면 todos가 javascript배열 타입으로 반환해줌 근데 문제는 또 이게 한번만 이렇게 되지 그 다음 또 add할 때는 다시 또 몹엑스가 관리하는 타입으로 반환됨. 그래서 toJS쓰면 됨\r\n        return toJS(this._todos);\r\n    }\r\n    @action\r\n    setTodoProps(name, value) {\r\n        this._todo = {\r\n            ...this._todo,\r\n            [name]: value\r\n        }\r\n    }\r\n    @action\r\n    addTodo(todo) {\r\n        this._todos.push(todo);\r\n        this._todo = {};\r\n    }\r\n    @action\r\n    selectedTodo(todo) {\r\n        this._todo = todo;\r\n    }\r\n    @action\r\n    updateTodo() {\r\n        let foundTodo = this._todos.find((todo) => todo.id === this._todo.id);\r\n        foundTodo.title = this._todo.title;\r\n        foundTodo.date = this._todo.date;\r\n\r\n        this._todo = {};\r\n    }\r\n    @action\r\n    removeTodo() {\r\n        let index = this._todos.findIndex(todo => todo.id === this._todo.id);\r\n        if (index > -1) {\r\n            this._todos.splice(index, 1);\r\n        }\r\n        this._todo = {};\r\n    }\r\n    @action\r\n    onSearchTodo(title) {\r\n        let updateTodos = this._todo;\r\n        console.log(updateTodos);\r\n    }\r\n\r\n}\r\n\r\nexport default new TodoStore();"]},"metadata":{},"sourceType":"module"}